/* This file is automatically generated by CustomHook hookmaker. */

typedef void (__stdcall *FN_DeleteCriticalSection)(LPCRITICAL_SECTION);
typedef void (__stdcall *FN_EnterCriticalSection)(LPCRITICAL_SECTION);
typedef BOOL (__stdcall *FN_FreeLibrary)(HMODULE);
typedef HANDLE (__stdcall *FN_GetCurrentProcess)();
typedef DWORD (__stdcall *FN_GetCurrentProcessId)();
typedef DWORD (__stdcall *FN_GetCurrentThreadId)();
typedef HMODULE (__stdcall *FN_GetModuleHandleA)(LPCSTR);
typedef FARPROC (__stdcall *FN_GetProcAddress)(HMODULE, LPCSTR);
typedef void (__stdcall *FN_GetStartupInfoA)(LPSTARTUPINFOA);
typedef void (__stdcall *FN_GetSystemTimeAsFileTime)(LPFILETIME);
typedef DWORD (__stdcall *FN_GetTickCount)();
typedef void (__stdcall *FN_InitializeCriticalSection)(LPCRITICAL_SECTION);
typedef void (__stdcall *FN_LeaveCriticalSection)(LPCRITICAL_SECTION);
typedef HMODULE (__stdcall *FN_LoadLibraryA)(LPCSTR);
typedef BOOL (__stdcall *FN_QueryPerformanceCounter)(LARGE_INTEGER*);
typedef LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *FN_SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER);
typedef void (__stdcall *FN_Sleep)(DWORD);
typedef BOOL (__stdcall *FN_TerminateProcess)(HANDLE, UINT);
typedef LPVOID (__stdcall *FN_TlsGetValue)(DWORD);
typedef LONG (__stdcall *FN_UnhandledExceptionFilter)(struct _EXCEPTION_POINTERS*);
typedef BOOL (__stdcall *FN_VirtualProtect)(LPVOID, SIZE_T, DWORD, PDWORD);
typedef SIZE_T (__stdcall *FN_VirtualQuery)(LPCVOID, PMEMORY_BASIC_INFORMATION, SIZE_T);
typedef INT_PTR (__stdcall *FN_DialogBoxParamW)(HINSTANCE, LPCWSTR, HWND, DLGPROC, LPARAM);
typedef BOOL (__stdcall *FN_EndDialog)(HWND, INT_PTR);
typedef int (__stdcall *FN_MessageBoxW)(HWND, LPCWSTR, LPCWSTR, UINT);
typedef BOOL (__stdcall *FN_SetDlgItemInt)(HWND, int, UINT, BOOL);

static FN_DeleteCriticalSection fn_DeleteCriticalSection = &DeleteCriticalSection;
static FN_EnterCriticalSection fn_EnterCriticalSection = &EnterCriticalSection;
static FN_FreeLibrary fn_FreeLibrary = &FreeLibrary;
static FN_GetCurrentProcess fn_GetCurrentProcess = &GetCurrentProcess;
static FN_GetCurrentProcessId fn_GetCurrentProcessId = &GetCurrentProcessId;
static FN_GetCurrentThreadId fn_GetCurrentThreadId = &GetCurrentThreadId;
static FN_GetModuleHandleA fn_GetModuleHandleA = &GetModuleHandleA;
static FN_GetProcAddress fn_GetProcAddress = &GetProcAddress;
static FN_GetStartupInfoA fn_GetStartupInfoA = &GetStartupInfoA;
static FN_GetSystemTimeAsFileTime fn_GetSystemTimeAsFileTime = &GetSystemTimeAsFileTime;
static FN_GetTickCount fn_GetTickCount = &GetTickCount;
static FN_InitializeCriticalSection fn_InitializeCriticalSection = &InitializeCriticalSection;
static FN_LeaveCriticalSection fn_LeaveCriticalSection = &LeaveCriticalSection;
static FN_LoadLibraryA fn_LoadLibraryA = &LoadLibraryA;
static FN_QueryPerformanceCounter fn_QueryPerformanceCounter = &QueryPerformanceCounter;
static FN_SetUnhandledExceptionFilter fn_SetUnhandledExceptionFilter = &SetUnhandledExceptionFilter;
static FN_Sleep fn_Sleep = &Sleep;
static FN_TerminateProcess fn_TerminateProcess = &TerminateProcess;
static FN_TlsGetValue fn_TlsGetValue = &TlsGetValue;
static FN_UnhandledExceptionFilter fn_UnhandledExceptionFilter = &UnhandledExceptionFilter;
static FN_VirtualProtect fn_VirtualProtect = &VirtualProtect;
static FN_VirtualQuery fn_VirtualQuery = &VirtualQuery;
static FN_DialogBoxParamW fn_DialogBoxParamW = &DialogBoxParamW;
static FN_EndDialog fn_EndDialog = &EndDialog;
static FN_MessageBoxW fn_MessageBoxW = &MessageBoxW;
static FN_SetDlgItemInt fn_SetDlgItemInt = &SetDlgItemInt;

void __stdcall
DetourDeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
{
    DWORD dwLastError;
    TRACE("DeleteCriticalSection(lpCriticalSection=%p)\n",
          lpCriticalSection);
    fn_DeleteCriticalSection(lpCriticalSection);
    dwLastError = GetLastError();
    SetLastError(dwLastError);
}

void __stdcall
DetourEnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
{
    DWORD dwLastError;
    TRACE("EnterCriticalSection(lpCriticalSection=%p)\n",
          lpCriticalSection);
    fn_EnterCriticalSection(lpCriticalSection);
    dwLastError = GetLastError();
    SetLastError(dwLastError);
}

BOOL __stdcall
DetourFreeLibrary(HMODULE hLibModule)
{
    DWORD dwLastError;
    BOOL ret;
    TRACE("FreeLibrary(hLibModule=%p)\n",
          hLibModule);
    ret = fn_FreeLibrary(hLibModule);
    dwLastError = GetLastError();
    TRACE("FreeLibrary returned %d (0x%X)\n", ret, ret);
    SetLastError(dwLastError);
    return ret;
}

HANDLE __stdcall
DetourGetCurrentProcess(void)
{
    DWORD dwLastError;
    HANDLE ret;
    TRACE("GetCurrentProcess()\n");
    ret = fn_GetCurrentProcess();
    dwLastError = GetLastError();
    TRACE("GetCurrentProcess returned %p\n", ret, ret);
    SetLastError(dwLastError);
    return ret;
}

DWORD __stdcall
DetourGetCurrentProcessId(void)
{
    DWORD dwLastError;
    DWORD ret;
    TRACE("GetCurrentProcessId()\n");
    ret = fn_GetCurrentProcessId();
    dwLastError = GetLastError();
    TRACE("GetCurrentProcessId returned %u (0x%X)\n", ret, ret);
    SetLastError(dwLastError);
    return ret;
}

DWORD __stdcall
DetourGetCurrentThreadId(void)
{
    DWORD dwLastError;
    DWORD ret;
    TRACE("GetCurrentThreadId()\n");
    ret = fn_GetCurrentThreadId();
    dwLastError = GetLastError();
    TRACE("GetCurrentThreadId returned %u (0x%X)\n", ret, ret);
    SetLastError(dwLastError);
    return ret;
}

HMODULE __stdcall
DetourGetModuleHandleA(LPCSTR lpModuleName)
{
    DWORD dwLastError;
    HMODULE ret;
    TRACE("GetModuleHandleA(lpModuleName=%s)\n",
          do_LPCSTR(lpModuleName));
    ret = fn_GetModuleHandleA(lpModuleName);
    dwLastError = GetLastError();
    TRACE("GetModuleHandleA returned %p\n", ret, ret);
    SetLastError(dwLastError);
    return ret;
}

FARPROC __stdcall
DetourGetProcAddress(HMODULE hModule, LPCSTR lpProcName)
{
    DWORD dwLastError;
    FARPROC ret;
    TRACE("GetProcAddress(hModule=%p, lpProcName=%s)\n",
          hModule, do_LPCSTR(lpProcName));
    ret = fn_GetProcAddress(hModule, lpProcName);
    dwLastError = GetLastError();
    TRACE("GetProcAddress returned %p\n", ret, ret);
    SetLastError(dwLastError);
    return ret;
}

void __stdcall
DetourGetStartupInfoA(LPSTARTUPINFOA lpStartupInfo)
{
    DWORD dwLastError;
    TRACE("GetStartupInfoA(lpStartupInfo=%p)\n",
          lpStartupInfo);
    fn_GetStartupInfoA(lpStartupInfo);
    dwLastError = GetLastError();
    SetLastError(dwLastError);
}

void __stdcall
DetourGetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
{
    DWORD dwLastError;
    TRACE("GetSystemTimeAsFileTime(lpSystemTimeAsFileTime=%p)\n",
          lpSystemTimeAsFileTime);
    fn_GetSystemTimeAsFileTime(lpSystemTimeAsFileTime);
    dwLastError = GetLastError();
    SetLastError(dwLastError);
}

DWORD __stdcall
DetourGetTickCount(void)
{
    DWORD dwLastError;
    DWORD ret;
    TRACE("GetTickCount()\n");
    ret = fn_GetTickCount();
    dwLastError = GetLastError();
    TRACE("GetTickCount returned %u (0x%X)\n", ret, ret);
    SetLastError(dwLastError);
    return ret;
}

void __stdcall
DetourInitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
{
    DWORD dwLastError;
    TRACE("InitializeCriticalSection(lpCriticalSection=%p)\n",
          lpCriticalSection);
    fn_InitializeCriticalSection(lpCriticalSection);
    dwLastError = GetLastError();
    SetLastError(dwLastError);
}

void __stdcall
DetourLeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
{
    DWORD dwLastError;
    TRACE("LeaveCriticalSection(lpCriticalSection=%p)\n",
          lpCriticalSection);
    fn_LeaveCriticalSection(lpCriticalSection);
    dwLastError = GetLastError();
    SetLastError(dwLastError);
}

HMODULE __stdcall
DetourLoadLibraryA(LPCSTR lpLibFileName)
{
    DWORD dwLastError;
    HMODULE ret;
    TRACE("LoadLibraryA(lpLibFileName=%s)\n",
          do_LPCSTR(lpLibFileName));
    ret = fn_LoadLibraryA(lpLibFileName);
    dwLastError = GetLastError();
    TRACE("LoadLibraryA returned %p\n", ret, ret);
    SetLastError(dwLastError);
    return ret;
}

BOOL __stdcall
DetourQueryPerformanceCounter(LARGE_INTEGER* lpPerformanceCount)
{
    DWORD dwLastError;
    BOOL ret;
    TRACE("QueryPerformanceCounter(lpPerformanceCount=%p)\n",
          lpPerformanceCount);
    ret = fn_QueryPerformanceCounter(lpPerformanceCount);
    dwLastError = GetLastError();
    TRACE("QueryPerformanceCounter returned %d (0x%X)\n", ret, ret);
    SetLastError(dwLastError);
    return ret;
}

LPTOP_LEVEL_EXCEPTION_FILTER __stdcall
DetourSetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
{
    DWORD dwLastError;
    LPTOP_LEVEL_EXCEPTION_FILTER ret;
    TRACE("SetUnhandledExceptionFilter(lpTopLevelExceptionFilter=%p)\n",
          lpTopLevelExceptionFilter);
    ret = fn_SetUnhandledExceptionFilter(lpTopLevelExceptionFilter);
    dwLastError = GetLastError();
    TRACE("SetUnhandledExceptionFilter returned %p\n", ret, ret);
    SetLastError(dwLastError);
    return ret;
}

void __stdcall
DetourSleep(DWORD dwMilliseconds)
{
    DWORD dwLastError;
    TRACE("Sleep(dwMilliseconds=%u (0x%X))\n",
          dwMilliseconds, dwMilliseconds);
    fn_Sleep(dwMilliseconds);
    dwLastError = GetLastError();
    SetLastError(dwLastError);
}

BOOL __stdcall
DetourTerminateProcess(HANDLE hProcess, UINT uExitCode)
{
    DWORD dwLastError;
    BOOL ret;
    TRACE("TerminateProcess(hProcess=%p, uExitCode=%u (0x%X))\n",
          hProcess, uExitCode, uExitCode);
    ret = fn_TerminateProcess(hProcess, uExitCode);
    dwLastError = GetLastError();
    TRACE("TerminateProcess returned %d (0x%X)\n", ret, ret);
    SetLastError(dwLastError);
    return ret;
}

LPVOID __stdcall
DetourTlsGetValue(DWORD dwTlsIndex)
{
    DWORD dwLastError;
    LPVOID ret;
    TRACE("TlsGetValue(dwTlsIndex=%u (0x%X))\n",
          dwTlsIndex, dwTlsIndex);
    ret = fn_TlsGetValue(dwTlsIndex);
    dwLastError = GetLastError();
    TRACE("TlsGetValue returned %p\n", ret, ret);
    SetLastError(dwLastError);
    return ret;
}

LONG __stdcall
DetourUnhandledExceptionFilter(struct _EXCEPTION_POINTERS* ExceptionInfo)
{
    DWORD dwLastError;
    LONG ret;
    TRACE("UnhandledExceptionFilter(ExceptionInfo=%p)\n",
          ExceptionInfo);
    ret = fn_UnhandledExceptionFilter(ExceptionInfo);
    dwLastError = GetLastError();
    TRACE("UnhandledExceptionFilter returned %d (0x%X)\n", ret, ret);
    SetLastError(dwLastError);
    return ret;
}

BOOL __stdcall
DetourVirtualProtect(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect)
{
    DWORD dwLastError;
    BOOL ret;
    TRACE("VirtualProtect(lpAddress=%p, dwSize=%u (0x%X), flNewProtect=%u (0x%X), lpflOldProtect=%p)\n",
          lpAddress, dwSize, dwSize, flNewProtect, flNewProtect, lpflOldProtect);
    ret = fn_VirtualProtect(lpAddress, dwSize, flNewProtect, lpflOldProtect);
    dwLastError = GetLastError();
    TRACE("VirtualProtect returned %d (0x%X)\n", ret, ret);
    SetLastError(dwLastError);
    return ret;
}

SIZE_T __stdcall
DetourVirtualQuery(LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength)
{
    DWORD dwLastError;
    SIZE_T ret;
    TRACE("VirtualQuery(lpAddress=%p, lpBuffer=%p, dwLength=%u (0x%X))\n",
          lpAddress, lpBuffer, dwLength, dwLength);
    ret = fn_VirtualQuery(lpAddress, lpBuffer, dwLength);
    dwLastError = GetLastError();
    TRACE("VirtualQuery returned %u (0x%X)\n", ret, ret);
    SetLastError(dwLastError);
    return ret;
}

INT_PTR __stdcall
DetourDialogBoxParamW(HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam)
{
    DWORD dwLastError;
    INT_PTR ret;
    TRACE("DialogBoxParamW(hInstance=%p, lpTemplateName=%ls, hWndParent=%p, lpDialogFunc=%p, dwInitParam=%d (0x%X))\n",
          hInstance, do_LPCWSTR(lpTemplateName), hWndParent, lpDialogFunc, dwInitParam, dwInitParam);
    ret = fn_DialogBoxParamW(hInstance, lpTemplateName, hWndParent, lpDialogFunc, dwInitParam);
    dwLastError = GetLastError();
    TRACE("DialogBoxParamW returned %d (0x%X)\n", ret, ret);
    SetLastError(dwLastError);
    return ret;
}

BOOL __stdcall
DetourEndDialog(HWND hDlg, INT_PTR nResult)
{
    DWORD dwLastError;
    BOOL ret;
    TRACE("EndDialog(hDlg=%p, nResult=%d (0x%X))\n",
          hDlg, nResult, nResult);
    ret = fn_EndDialog(hDlg, nResult);
    dwLastError = GetLastError();
    TRACE("EndDialog returned %d (0x%X)\n", ret, ret);
    SetLastError(dwLastError);
    return ret;
}

int __stdcall
DetourMessageBoxW(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType)
{
    DWORD dwLastError;
    int ret;
    TRACE("MessageBoxW(hWnd=%p, lpText=%ls, lpCaption=%ls, uType=%u (0x%X))\n",
          hWnd, do_LPCWSTR(lpText), do_LPCWSTR(lpCaption), uType, uType);
    ret = fn_MessageBoxW(hWnd, lpText, lpCaption, uType);
    dwLastError = GetLastError();
    TRACE("MessageBoxW returned %d (0x%X)\n", ret, ret);
    SetLastError(dwLastError);
    return ret;
}

BOOL __stdcall
DetourSetDlgItemInt(HWND hDlg, int nIDDlgItem, UINT uValue, BOOL bSigned)
{
    DWORD dwLastError;
    BOOL ret;
    TRACE("SetDlgItemInt(hDlg=%p, nIDDlgItem=%d (0x%X), uValue=%u (0x%X), bSigned=%d (0x%X))\n",
          hDlg, nIDDlgItem, nIDDlgItem, uValue, uValue, bSigned, bSigned);
    ret = fn_SetDlgItemInt(hDlg, nIDDlgItem, uValue, bSigned);
    dwLastError = GetLastError();
    TRACE("SetDlgItemInt returned %d (0x%X)\n", ret, ret);
    SetLastError(dwLastError);
    return ret;
}

BOOL DoHook(BOOL bHook)
{
    if (bHook)
    {
        fn_DeleteCriticalSection = CH_DoHook("kernel32.dll", "DeleteCriticalSection", &DetourDeleteCriticalSection);
        if (!fn_DeleteCriticalSection) return FALSE;
        fn_EnterCriticalSection = CH_DoHook("kernel32.dll", "EnterCriticalSection", &DetourEnterCriticalSection);
        if (!fn_EnterCriticalSection) return FALSE;
        fn_FreeLibrary = CH_DoHook("kernel32.dll", "FreeLibrary", &DetourFreeLibrary);
        if (!fn_FreeLibrary) return FALSE;
        fn_GetCurrentProcess = CH_DoHook("kernel32.dll", "GetCurrentProcess", &DetourGetCurrentProcess);
        if (!fn_GetCurrentProcess) return FALSE;
        fn_GetCurrentProcessId = CH_DoHook("kernel32.dll", "GetCurrentProcessId", &DetourGetCurrentProcessId);
        if (!fn_GetCurrentProcessId) return FALSE;
        fn_GetCurrentThreadId = CH_DoHook("kernel32.dll", "GetCurrentThreadId", &DetourGetCurrentThreadId);
        if (!fn_GetCurrentThreadId) return FALSE;
        fn_GetModuleHandleA = CH_DoHook("kernel32.dll", "GetModuleHandleA", &DetourGetModuleHandleA);
        if (!fn_GetModuleHandleA) return FALSE;
        fn_GetProcAddress = CH_DoHook("kernel32.dll", "GetProcAddress", &DetourGetProcAddress);
        if (!fn_GetProcAddress) return FALSE;
        fn_GetStartupInfoA = CH_DoHook("kernel32.dll", "GetStartupInfoA", &DetourGetStartupInfoA);
        if (!fn_GetStartupInfoA) return FALSE;
        fn_GetSystemTimeAsFileTime = CH_DoHook("kernel32.dll", "GetSystemTimeAsFileTime", &DetourGetSystemTimeAsFileTime);
        if (!fn_GetSystemTimeAsFileTime) return FALSE;
        fn_GetTickCount = CH_DoHook("kernel32.dll", "GetTickCount", &DetourGetTickCount);
        if (!fn_GetTickCount) return FALSE;
        fn_InitializeCriticalSection = CH_DoHook("kernel32.dll", "InitializeCriticalSection", &DetourInitializeCriticalSection);
        if (!fn_InitializeCriticalSection) return FALSE;
        fn_LeaveCriticalSection = CH_DoHook("kernel32.dll", "LeaveCriticalSection", &DetourLeaveCriticalSection);
        if (!fn_LeaveCriticalSection) return FALSE;
        fn_LoadLibraryA = CH_DoHook("kernel32.dll", "LoadLibraryA", &DetourLoadLibraryA);
        if (!fn_LoadLibraryA) return FALSE;
        fn_QueryPerformanceCounter = CH_DoHook("kernel32.dll", "QueryPerformanceCounter", &DetourQueryPerformanceCounter);
        if (!fn_QueryPerformanceCounter) return FALSE;
        fn_SetUnhandledExceptionFilter = CH_DoHook("kernel32.dll", "SetUnhandledExceptionFilter", &DetourSetUnhandledExceptionFilter);
        if (!fn_SetUnhandledExceptionFilter) return FALSE;
        fn_Sleep = CH_DoHook("kernel32.dll", "Sleep", &DetourSleep);
        if (!fn_Sleep) return FALSE;
        fn_TerminateProcess = CH_DoHook("kernel32.dll", "TerminateProcess", &DetourTerminateProcess);
        if (!fn_TerminateProcess) return FALSE;
        fn_TlsGetValue = CH_DoHook("kernel32.dll", "TlsGetValue", &DetourTlsGetValue);
        if (!fn_TlsGetValue) return FALSE;
        fn_UnhandledExceptionFilter = CH_DoHook("kernel32.dll", "UnhandledExceptionFilter", &DetourUnhandledExceptionFilter);
        if (!fn_UnhandledExceptionFilter) return FALSE;
        fn_VirtualProtect = CH_DoHook("kernel32.dll", "VirtualProtect", &DetourVirtualProtect);
        if (!fn_VirtualProtect) return FALSE;
        fn_VirtualQuery = CH_DoHook("kernel32.dll", "VirtualQuery", &DetourVirtualQuery);
        if (!fn_VirtualQuery) return FALSE;
        fn_DialogBoxParamW = CH_DoHook("user32.dll", "DialogBoxParamW", &DetourDialogBoxParamW);
        if (!fn_DialogBoxParamW) return FALSE;
        fn_EndDialog = CH_DoHook("user32.dll", "EndDialog", &DetourEndDialog);
        if (!fn_EndDialog) return FALSE;
        fn_MessageBoxW = CH_DoHook("user32.dll", "MessageBoxW", &DetourMessageBoxW);
        if (!fn_MessageBoxW) return FALSE;
        fn_SetDlgItemInt = CH_DoHook("user32.dll", "SetDlgItemInt", &DetourSetDlgItemInt);
        if (!fn_SetDlgItemInt) return FALSE;
    }
    else
    {
        CH_DoHook("kernel32.dll", "DeleteCriticalSection", fn_DeleteCriticalSection);
        CH_DoHook("kernel32.dll", "EnterCriticalSection", fn_EnterCriticalSection);
        CH_DoHook("kernel32.dll", "FreeLibrary", fn_FreeLibrary);
        CH_DoHook("kernel32.dll", "GetCurrentProcess", fn_GetCurrentProcess);
        CH_DoHook("kernel32.dll", "GetCurrentProcessId", fn_GetCurrentProcessId);
        CH_DoHook("kernel32.dll", "GetCurrentThreadId", fn_GetCurrentThreadId);
        CH_DoHook("kernel32.dll", "GetModuleHandleA", fn_GetModuleHandleA);
        CH_DoHook("kernel32.dll", "GetProcAddress", fn_GetProcAddress);
        CH_DoHook("kernel32.dll", "GetStartupInfoA", fn_GetStartupInfoA);
        CH_DoHook("kernel32.dll", "GetSystemTimeAsFileTime", fn_GetSystemTimeAsFileTime);
        CH_DoHook("kernel32.dll", "GetTickCount", fn_GetTickCount);
        CH_DoHook("kernel32.dll", "InitializeCriticalSection", fn_InitializeCriticalSection);
        CH_DoHook("kernel32.dll", "LeaveCriticalSection", fn_LeaveCriticalSection);
        CH_DoHook("kernel32.dll", "LoadLibraryA", fn_LoadLibraryA);
        CH_DoHook("kernel32.dll", "QueryPerformanceCounter", fn_QueryPerformanceCounter);
        CH_DoHook("kernel32.dll", "SetUnhandledExceptionFilter", fn_SetUnhandledExceptionFilter);
        CH_DoHook("kernel32.dll", "Sleep", fn_Sleep);
        CH_DoHook("kernel32.dll", "TerminateProcess", fn_TerminateProcess);
        CH_DoHook("kernel32.dll", "TlsGetValue", fn_TlsGetValue);
        CH_DoHook("kernel32.dll", "UnhandledExceptionFilter", fn_UnhandledExceptionFilter);
        CH_DoHook("kernel32.dll", "VirtualProtect", fn_VirtualProtect);
        CH_DoHook("kernel32.dll", "VirtualQuery", fn_VirtualQuery);
        CH_DoHook("user32.dll", "DialogBoxParamW", fn_DialogBoxParamW);
        CH_DoHook("user32.dll", "EndDialog", fn_EndDialog);
        CH_DoHook("user32.dll", "MessageBoxW", fn_MessageBoxW);
        CH_DoHook("user32.dll", "SetDlgItemInt", fn_SetDlgItemInt);
    }
    return TRUE;
}

